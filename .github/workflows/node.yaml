name: Core CI/CD

on:
  push:
    branches:
      - "master"
      - "release*"
      - "EAV-*"
  workflow_dispatch:

jobs:
  lint-core:
    name: Typecheck and Lint Core
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            meteor/node_modules
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock', 'meteor/yarn.lock', 'meteor/.meteor/release', 'packages/yarn.lock') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        run: |
          yarn config set cacheFolder /home/runner/lint-core-cache
          yarn
          yarn build:packages
        env:
          CI: true
      - name: Run typecheck and linter
        run: |
          cd meteor

          # setup zodern:types. No linters are setup, so this simply installs the packages
          meteor lint

          yarn ci:lint
        env:
          CI: true

  test-core:
    name: Test Core
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            meteor/node_modules
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock', 'meteor/yarn.lock', 'meteor/.meteor/release', 'packages/yarn.lock') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        run: |
          yarn config set cacheFolder /home/runner/test-core-cache
          yarn
          yarn build:packages
        env:
          CI: true
      - name: Run Tests
        run: |
          cd meteor

          # setup zodern:types. No linters are setup, so this simply installs the packages
          meteor lint

          NODE_OPTIONS="--max-old-space-size=6144" yarn unitci --force-exit
        env:
          CI: true
      - name: Send coverage
        if: ((github.event_name == 'pull_request') && (!startsWith(github.head_ref, 'release'))) || ((github.event_name == 'push') && (!startsWith(github.ref_name, 'release')))
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-core:
    name: Build Core and publish docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Determine if images should be published to ecr
        id: ecrrepo
        run: |
          # check if a release branch, or master, or a tag
          if [[ "${{ github.ref }}" =~ ^refs/heads/release([0-9]+)$ || "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == refs/tags/* || "${{ github.ref }}" == refs/heads/EAV-* ]]
          then
            ECRREPO_PUBLISH="1"
          else
            ECRREPO_PUBLISH="0"
          fi
          # debug output
          echo "ecrrepo-publish $ECRREPO_PUBLISH"
          echo "ecrrepo-publish=$ECRREPO_PUBLISH" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get the Docker tag for ecr
        id: ecr-tag
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/sofie-core
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Use Node.js
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - uses: ./.github/actions/setup-meteor
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
      - name: restore node_modules
        uses: actions/cache@v4
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        with:
          path: |
            node_modules
            meteor/node_modules
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock', 'meteor/yarn.lock', 'meteor/.meteor/release', 'packages/yarn.lock') }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        run: |
          yarn install
      - name: Build libs
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        run: |
          yarn build:packages
      - name: Persist Built Version information
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        run: |
          cd meteor
          yarn inject-git-hash
      - name: Meteor Build
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        run: |
          cd meteor
          NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
      - name: Meteor Bundle NPM Build
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        run: |
          cd meteor/bundle/programs/server
          meteor npm install
      - name: Set up Docker Buildx
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: docker/setup-buildx-action@v3
      - name: Build and push to ECR
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ecr-tag.outputs.tags != 0
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./meteor/Dockerfile.circle
          push: true
          provenance: false
          labels: ${{ steps.ecr-tag.outputs.labels }}
          tags: "${{ steps.ecr-tag.outputs.tags }}"
          github-token: ${{ github.token }}
      - name: Get image for Trivy scanning
        id: trivy-image
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ecr-tag.outputs.tags != 0
        run: |
          image=$(echo ${{ steps.ecr-tag.outputs.tags }} | head -n 1)
          echo "image=$image" >> $GITHUB_OUTPUT
      - name: Trivy scanning
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ecr-tag.outputs.tags != 0
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.24.0
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
        with:
          image-ref: "${{ steps.trivy-image.outputs.image }}"
          format: "table"
          output: trivy-scan-result.txt
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
      - name: Post all Trivy scan results to Github Summary as a table
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ecr-tag.outputs.tags != 0
        env:
          CODE_BLOCK: "```"
        run: |
          echo "# Trivy scan results ~ core" >> $GITHUB_STEP_SUMMARY
          if [ -f trivy-scan-result.txt ]; then
            echo "$CODE_BLOCK" >> $GITHUB_STEP_SUMMARY
            cat trivy-scan-result.txt >> $GITHUB_STEP_SUMMARY
            echo "$CODE_BLOCK" >> $GITHUB_STEP_SUMMARY
          else
            echo "Trivy scan result file not found." >> $GITHUB_STEP_SUMMARY
          fi
  build-gateways:
    # TODO - should this be dependant on tests or something passing if we are on a tag?
    name: Build gateways
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        gateway-name: [playout-gateway, "live-status-gateway"]

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Determine if images should be published to ecr
        id: ecrrepo
        run: |
          # check if a release branch, or master, or a tag
          if [[ "${{ github.ref }}" =~ ^refs/heads/release([0-9]+)$ || "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == refs/tags/* || "${{ github.ref }}" == refs/heads/EAV-* ]]
          then
              ECRREPO_PUBLISH="1"
          else
              ECRREPO_PUBLISH="0"
          fi
          # debug output
          echo "ecrrepo-publish $ECRREPO_PUBLISH"
          echo "ecrrepo-publish=$ECRREPO_PUBLISH" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get the Docker tag for ecr
        id: ecr-tag
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.gateway-name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Get the Docker tag for ECR
        id: ghcr-tag
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.gateway-name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Use Node.js
        uses: actions/setup-node@v4
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        with:
          node-version-file: ".node-version"
      - name: restore node_modules
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: actions/cache@v4
        with:
          path: |
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('packages/yarn.lock') }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Build
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        run: |
          cd packages
          yarn install
          yarn lerna run --scope \*\*/${{ matrix.gateway-name }} --include-dependencies --stream build
          yarn run pinst --disable
          yarn workspaces focus ${{ matrix.gateway-name }} --production
      - name: Set up Docker Buildx
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1'
        uses: docker/setup-buildx-action@v3
      - name: Build and push to ECR
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ghcr-tag.outputs.tags != 0
        uses: docker/build-push-action@v6
        with:
          context: ./packages
          file: ./packages/${{ matrix.gateway-name }}/Dockerfile.circle
          push: true
          provenance: false
          labels: ${{ steps.ghcr-tag.outputs.labels }}
          tags: "${{ steps.ghcr-tag.outputs.tags }}"
      - name: Get image for Trivy scanning
        id: trivy-image
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ghcr-tag.outputs.tags != 0
        run: |
          image=$(echo ${{ steps.ghcr-tag.outputs.tags }} | head -n 1)
          echo "image=$image" >> $GITHUB_OUTPUT
      - name: Trivy scanning
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ghcr-tag.outputs.tags != 0
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.24.0
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
        with:
          image-ref: "${{ steps.trivy-image.outputs.image }}"
          format: "table"
          output: ${{ matrix.gateway-name }}-trivy-scan-result.txt
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
      - name: Post all Trivy scan results to Github Summary as a table
        if: steps.ecrrepo.outputs.ecrrepo-publish == '1' && steps.ghcr-tag.outputs.tags != 0
        env:
          CODE_BLOCK: "```"
        run: |
          echo "# Trivy scan results ~ ${{ matrix.gateway-name }}" >> $GITHUB_STEP_SUMMARY
          if [ -f "${{ matrix.gateway-name }}-trivy-scan-result.txt" ]; then
            echo $CODE_BLOCK >> $GITHUB_STEP_SUMMARY
            cat "${{ matrix.gateway-name }}-trivy-scan-result.txt" >> $GITHUB_STEP_SUMMARY
            echo $CODE_BLOCK >> $GITHUB_STEP_SUMMARY
          else
            echo "Trivy scan result file not found." >> $GITHUB_STEP_SUMMARY
          fi
  lint-packages:
    name: Lint Package
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        package-name:
          - blueprints-integration
          - server-core-integration
          - playout-gateway
          - mos-gateway
          - corelib
          - shared-lib
          - meteor-lib
          - job-worker
          - openapi
          - live-status-gateway
          - webui
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('packages/yarn.lock') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        run: |
          cd packages
          yarn config set cacheFolder /home/runner/${{ matrix.package-name }}-cache
          yarn install
          yarn lerna run --scope \*\*/${{ matrix.package-name }} --include-dependencies --stream build
        env:
          CI: true
      - name: Run typecheck and linter
        run: |
          cd packages/${{ matrix.package-name }}
          yarn lint
        env:
          CI: true

  test-packages:
    name: Test Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        package-name:
          - blueprints-integration
          - server-core-integration
          - shared-lib
          - openapi
        node-version: [22.x]
        include:
          # include additional configs, to run certain packages only for a certain version of node
          - node-version: 22.x
            package-name: corelib
            send-coverage: true
          - node-version: 22.x
            package-name: job-worker
            send-coverage: true
          # No tests for the gateways yet
          # - node-version: 22.x
          #   package-name: playout-gateway
          # - node-version: 22.x
          #   package-name: mos-gateway
          - node-version: 22.x
            package-name: live-status-gateway
            send-coverage: true
          - node-version: 22.x
            package-name: webui
          # manual meteor-lib as it only needs a couple of versions
          - node-version: 22.x
            package-name: meteor-lib
            send-coverage: true

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('packages/yarn.lock') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        run: |
          cd packages
          yarn config set cacheFolder /home/runner/test-packages-cache
          yarn install
          yarn lerna run --scope \*\*/${{ matrix.package-name }} --include-dependencies --stream build
        env:
          CI: true
      - name: Run tests
        run: |
          cd packages/${{ matrix.package-name }}
          yarn unit
        env:
          CI: true
      - name: Send coverage
        if: (matrix.node-version == '18.x' || matrix.send-coverage == true) && ((github.event_name == 'pull_request') && ((!startsWith(github.head_ref, 'release'))) || ((github.event_name == 'push') && (!startsWith(github.ref_name, 'release'))))
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  asyncapi-generation:
    name: AsyncAPI Generation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - name: Prepare Environment
        run: |
          cd packages
          yarn
        env:
          CI: true
      - name: Run generator
        run: |
          cd packages/live-status-gateway

          yarn gendocs
          yarn genserver
        env:
          CI: true
  openapi-generation:
    name: OpenAPI Generation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - name: Prepare Environment
        run: |
          cd packages
          yarn
        env:
          CI: true
      - name: Build OpenAPI client library
        run: |
          cd packages/openapi
          yarn build
        env:
          CI: true
      - name: Generate OpenAPI docs and server
        run: |
          cd packages/openapi
          yarn gendocs
          yarn genserver
        env:
          CI: true
  publish-docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('packages/yarn.lock') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        run: |
          cd packages
          yarn config set cacheFolder /home/runner/publish-docs-cache
          yarn install
          yarn build
        env:
          CI: true
      - name: Run docusaurus
        run: |
          cd packages/documentation
          yarn docs:build
        env:
          CI: true
      - name: Run typedoc
        run: |
          cd packages
          yarn docs:typedoc
          cp docs documentation/build/typedoc -R
        env:
          CI: true
      - name: Publish
        if: github.ref == 'refs/heads/master' # always publish for just the master branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./packages/documentation/build

  release-libs:
    name: Release Lib
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write
    # only run for tags    # only run for tags
    if: contains(github.ref, 'refs/tags/')
    needs:
      - test-packages
      # core must be published first
      - build-core

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment # have to run this first to make sure the semver lib is available
        run: |
          yarn config set cacheFolder /home/runner/release-libs-cache

          cd packages
          yarn install
        env:
          CI: true
      - name: Check release is desired
        id: do-publish
        run: |
          if [ -z "${{ secrets.AWS_ROLE_ARN }}" ]; then
            echo "No Role"
          else
            # make dependencies of `determine-npm-tag` available
            yarn install --mode=skip-build

            cd packages
            PACKAGE_NAME="@sofie-automation/shared-lib"
            PUBLISHED_VERSION=$(yarn npm info --json $PACKAGE_NAME | jq -c '.version' -r)
            THIS_VERSION=$(node -p "require('./lerna.json').version")
            NPM_TAG=$(node ../scripts/determine-npm-tag.js $PUBLISHED_VERSION $THIS_VERSION)

            echo "Publishing $NPM_TAG"
            echo "tag=$NPM_TAG" >> $GITHUB_OUTPUT

          fi
      - name: Build
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          cd packages
          yarn build
        env:
          CI: true
      - name: Build OpenAPI client library
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          cd packages/openapi
          yarn build
        env:
          CI: true
      - name: Modify dependencies to use npm packages
        run: node scripts/prepublish.js
      - name: Reset .yarnrc.yml
        run: |
          # hack as it can sometimes have unexpected changes
          git checkout .yarnrc.yml
      - name: Publish to Code Artifact
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          cd packages
          git checkout .yarnrc.yml
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
          yarn lerna publish from-package --tag-version-prefix='' --dist-tag ${{ steps.do-publish.outputs.tag }} --yes --no-verify-access
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "**Published:** $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        env:
          CI: true

  check-for-multiple-library-versions:
    name: Check for multiple library versions
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            meteor/node_modules
            packages/node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock', 'meteor/yarn.lock', 'meteor/.meteor/release', 'packages/yarn.lock') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository selma-store --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }}
      - name: Configure CodeArtifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain selma --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text`
          yarn config set npmRegistryServer "https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAuthToken' "${CODEARTIFACT_AUTH_TOKEN}"
          yarn config set 'npmRegistries["https://selma-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/npm/selma-store/"].npmAlwaysAuth' "true"
      - name: Prepare Environment
        run: |
          yarn config set cacheFolder /home/runner/check-for-multiple-library-versions-cache
          yarn
        env:
          CI: true
      - name: Run check
        run: |
          yarn validate:versions
        env:
          CI: true
